#!/usr/bin/env zsh
emulate -L zsh

TRAPZERR(){ echo ' ** Build Failed **'; exit 1 }

cd $0:h

#DEBUG=0

: ${PREFIX:=$HOME}
: ${BINDIR:=$PREFIX/bin}
: ${DATEDIR:=$PREFIX/share}
: ${MANDIR:=$DATADIR/man}

: ${CC:=llvm-gcc}

_CFLAGS=(-Os -mtune=native -mdynamic-no-pic -ffast-math -fstrict-aliasing -ftree-vectorize -std=gnu99 -pipe -fvisibility=hidden -fno-pic -Wfatal-errors -Wall -Wextra -Wcast-align -Wwrite-strings -Wstrict-prototypes -Wno-cast-qual -freorder-blocks)

if [[ $CC:t == clang ]]; then
	_CFLAGS+=-march=native
else
	_CFLAGS+=-combine
fi
[[ $CC:t != gcc ]] && _CFLAGS+=-flto

UTILS=(alert any2txt app appr beep bundle cifilter displaysleep dup fileicon goosh hotkeys impbrowser imgconv imgshadow imgsnap imgtext imgview imgwin loginitems menu nml normalize pdfcat pdfextract pdfinfo pid ql quit readalias setapp seticon slideshow trash uti win winalpha winlevel winmove winshadow wintransform wintransition xattr)

DOIT(){
	print -- $*
	$*
}

_make(){
	DOIT $CC $_CFLAGS $CFLAGS -o $* && _post $1
}
_post(){
	[[ -z $DEBUG ]] && DOIT strip $1
}

nt(){
	[[ ! -e $1 ]] && return 0
	for i in $*[2,-1]; [[ $i -nt $1 ]] && return 0
}

is_appkit(){ for i in alert app appr beep bundle cifilter dup fileicon imgconv imgshadow imgtext setapp seticon trash; [[ $i == $1 ]] && return 0 }
_appkit(){
	if nt $1{,.m}; then
		_make $1 $1.m $*[2,-1] -framework AppKit
	fi
}
is_c(){ for i in nml pid xattr; [[ $i == $1 ]] && return 0 }
_c(){
	if nt $1{,.c}; then
		_make $1 $1.c $*[2,-1]
	fi
}

_make_any2txt(){
	_appkit any2txt -framework Quartz -framework QuickLook
}
_make_displaysleep(){
	_c displaysleep -framework IOKit
}
_make_goosh(){
	if nt goosh goosh*.*; then
		_make goosh goosh.m goosh-fn.m goosh-JSON.m -framework AppKit
	fi
}
_make_hotkeys(){
	_c hotkeys -framework Carbon
}

for util in ${*:-UTILS}; do
	if [[ ${$(whence -w _make_$util)%_make_$util:*} == ' function' ]]; then
		_make_$util
	elif is_appkit $util; then
		_appkit $util
	elif is_c $util; then
		_c $util
	else
		print "Don't know how to make $util"; continue
	fi
done
